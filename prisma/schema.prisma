generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  firstName     String?
  lastName      String?
  accounts      Account[]
  projects      Project[]
  sessions      Session[]
  activities    Activity[]
}

model Project {
  id           String        @id @default(cuid())
  name         String
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  status       String        @default("active")
  features     Feature[]
  gherkinFiles GherkinFile[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  slang        String        @unique
  activities   Activity[]
}

model Feature {
  id          String      @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  projectId   String
  background  Background?
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  scenarios   Scenario[]
  slang       String      @default("gherkin")
  tags        String[]    @default([])
  rulesJson   Json?       // <--- این خط را اضافه کن
  order       Int         @default(0) // ترتیب نمایش
  activities  Activity[]
}

model Background {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  featureId String   @unique
  feature   Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  steps     Step[]
  name      String?
  keyword   String?
  tags      String[] @default([])
}

model Scenario {
  id          String     @id @default(cuid())
  name        String
  description String?
  type        String     @default("scenario")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  featureId   String
  feature     Feature    @relation(fields: [featureId], references: [id], onDelete: Cascade)
  steps       Step[]
  examples    Examples[]
  keyword     String?
  tags        String[]   @default([])
}

model Examples {
  id          String   @id @default(cuid())
  name        String?
  description String?
  tags        String[] @default([])
  header      Json?
  body        Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  scenarioId  String
  scenario    Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
}

model Step {
  id           String      @id @default(cuid())
  keyword      String
  text         String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  scenarioId   String?
  backgroundId String?
  background   Background? @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  scenario     Scenario?   @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  argument     Json?
}

model GherkinFile {
  id        String   @id @default(cuid())
  name      String
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Activity {
  id          String   @id @default(cuid())
  type        String   // CREATE, UPDATE, DELETE, IMPORT, EXPORT, etc.
  action      String   // Specific action like "feature_created", "project_updated"
  description String   // Human-readable description in Persian
  metadata    Json?    // Additional data like old/new values, counts, etc.
  createdAt   DateTime @default(now())
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  featureId   String?
  feature     Feature? @relation(fields: [featureId], references: [id], onDelete: Cascade)
  
  // Indexes for better performance
  @@index([userId, createdAt])
  @@index([projectId, createdAt])
  @@index([featureId, createdAt])
  @@index([type, createdAt])
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  firstName     String?
  lastName      String?
  accounts      Account[]
  projects      Project[]
  sessions      Session[]
  activities    Activity[]
  isSuper       Boolean   @default(false)
  isActive      Boolean   @default(true)
  autoSave      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Azure DevOps Integration Settings
  azureApiUrl   String?
  azureTfsUrl   String?
  azureToken    String?

  // Versioning & Approval System
  projectVersions      ProjectVersion[]
  approvedVersions     ProjectVersion[] @relation("ApprovedBy")
  rejectedVersions     ProjectVersion[] @relation("RejectedBy")
  versionApprovals     VersionApproval[]

  // Azure Sync Jobs
  azureSyncJobs AzureSyncJob[]
  
  // Notifications
  notifications Notification[]
}

model Project {
  id           String        @id @default(cuid())
  name         String
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  status       String        @default("active")
  isLocked     Boolean       @default(false) // قفل برای انتشار نسخه
  features     Feature[]
  gherkinFiles GherkinFile[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  slang        String        @unique
  activities   Activity[]
  
  // Versioning
  versions     ProjectVersion[]
  
  // Azure Sync Jobs
  azureSyncJobs AzureSyncJob[]
  
  // Notifications
  notifications Notification[]
}

model Feature {
  id          String      @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  projectId   String
  background  Background?
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  scenarios   Scenario[]
  slang       String      @default("gherkin")
  tags        String[]    @default([])
  rulesJson   Json?       // <--- این خط را اضافه کن
  order       Int         @default(0) // ترتیب نمایش
  activities  Activity[]
}

model Background {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  featureId String   @unique
  feature   Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)
  steps     Step[]
  name      String?
  keyword   String?
  tags      String[] @default([])
}

model Scenario {
  id          String     @id @default(cuid())
  name        String
  description String?
  type        String     @default("scenario")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  featureId   String
  feature     Feature    @relation(fields: [featureId], references: [id], onDelete: Cascade)
  steps       Step[]
  examples    Examples[]
  keyword     String?
  tags        String[]   @default([])
}

model Examples {
  id          String   @id @default(cuid())
  name        String?
  description String?
  tags        String[] @default([])
  header      Json?
  body        Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  scenarioId  String
  scenario    Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
}

model Step {
  id           String      @id @default(cuid())
  keyword      String
  text         String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  scenarioId   String?
  backgroundId String?
  background   Background? @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  scenario     Scenario?   @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  argument     Json?
}

model GherkinFile {
  id        String   @id @default(cuid())
  name      String
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Activity {
  id          String   @id @default(cuid())
  type        String   // CREATE, UPDATE, DELETE, IMPORT, EXPORT, etc.
  action      String   // Specific action like "feature_created", "project_updated"
  description String   // Human-readable description in Persian
  metadata    Json?    // Additional data like old/new values, counts, etc.
  createdAt   DateTime @default(now())
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  featureId   String?
  feature     Feature? @relation(fields: [featureId], references: [id], onDelete: Cascade)
  
  // Indexes for better performance
  @@index([userId, createdAt])
  @@index([projectId, createdAt])
  @@index([featureId, createdAt])
  @@index([type, createdAt])
}

model ProjectVersion {
  id                String    @id @default(cuid())
  version           String    // semantic version like "1.0.0"
  major             Int
  minor             Int
  patch             Int
  status            VersionStatus @default(PENDING)
  releaseNotes      String?   // auto-generated release notes
  changesSummary    Json?     // structured changes data
  snapshotData      Json      // full project snapshot at version time
  
  // Relations
  projectId         String
  project           Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdById       String
  createdBy         User      @relation(fields: [createdById], references: [id])
  
  approvedById      String?
  approvedBy        User?     @relation("ApprovedBy", fields: [approvedById], references: [id])
  
  rejectedById      String?
  rejectedBy        User?     @relation("RejectedBy", fields: [rejectedById], references: [id])
  
  approvals         VersionApproval[]
  notifications     Notification[]
  
  createdAt         DateTime  @default(now())
  approvedAt        DateTime?
  rejectedAt        DateTime?
  
  @@unique([projectId, version])
  @@index([projectId, status])
}

model VersionApproval {
  id                String    @id @default(cuid())
  status            ApprovalStatus
  message           String?   // rejection reason or approval note
  
  // Relations
  versionId         String
  version           ProjectVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
  
  reviewerId        String
  reviewer          User      @relation(fields: [reviewerId], references: [id])
  
  createdAt         DateTime  @default(now())
  
  @@unique([versionId, reviewerId])
}

enum VersionStatus {
  PENDING           // Waiting for approval
  APPROVED          // Approved and released
  REJECTED          // Rejected
  DRAFT             // Work in progress
}

enum ApprovalStatus {
  APPROVED
  REJECTED
  PENDING
}

model AzureSyncJob {
  id              String    @id @default(cuid())
  taskId          String?   // Azure task ID from async import
  status          AzureSyncStatus @default(PENDING)
  progress        Int       @default(0) // 0-100
  
  // Request data
  projectName     String
  version         String    @default("4.0.0")
  
  // Response data
  result          Json?     // Final result when completed
  error           String?   // Error message if failed
  logs            Json?     // Array of log messages
  
  // Azure results (when completed successfully)
  testPlanId      String?
  testSuiteId     String?
  allSuiteIds     Json?     // Array of suite IDs
  createdCount    Int?      // Number of test cases created
  
  // Relations
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId       String
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  completedAt     DateTime?
  
  @@index([userId, status])
  @@index([projectId, status])
  @@index([taskId])
}

enum AzureSyncStatus {
  PENDING     // Not started yet
  STARTED     // Azure task created
  RUNNING     // Azure task in progress
  COMPLETED   // Successfully completed
  FAILED      // Failed with error
  TIMEOUT     // Took too long to complete
}

model Notification {
  id          String    @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  isRead      Boolean   @default(false)
  forQA       Boolean   @default(false) // For QA team notifications
  
  // Relations
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  versionId   String?
  version     ProjectVersion? @relation(fields: [versionId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  
  @@index([userId, isRead])
  @@index([forQA, isRead])
  @@index([projectId])
}

enum NotificationType {
  PROJECT_SUBMITTED   // Project submitted for QA review
  PROJECT_APPROVED    // Project approved by QA
  PROJECT_REJECTED    // Project rejected by QA
  VERSION_READY       // New version available
  AZURE_SYNC_COMPLETED // Azure sync completed
  AZURE_SYNC_FAILED   // Azure sync failed
}